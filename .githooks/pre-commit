#!/bin/bash
# --- Configuration ---
# Path to your Python conversion script, relative to the main Obsidian vault root
PYTHON_SCRIPT=".scripts/obsidian_to_jekyll.py"
JEKYLL_SUBMODULE_PATH=".jekyll_repository"
OBSIDIAN_PUBLISH_DIR="Publish"

# --- Branch Check ---
# Only run this hook on master branch
CURRENT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
if [ "$CURRENT_BRANCH" != "master" ]; then
    echo "Pre-commit hook: Skipping - not on master branch (current: $CURRENT_BRANCH)"
    exit 0
fi

# --- Pre-commit Logic ---
echo "--- Running pre-commit hook for Obsidian vault ---"

# 1. Check if relevant files in the Obsidian publish directory have changed in this commit
# git diff --cached --name-only looks at staged changes for the current commit.
# We only want to run if files in OBSIDIAN_PUBLISH_DIR were modified or added.
if git diff --cached --name-only | grep -q "^${OBSIDIAN_PUBLISH_DIR}/"; then
    echo "Changes detected in ${OBSIDIAN_PUBLISH_DIR} directory. Running conversion script."
    
    # 2. Run Python Script
    # The Python script needs to know where to find the source notes and where to output them.
    # We pass the full paths.
    echo "Running Python script: ${PYTHON_SCRIPT}..."
    python3 "${PYTHON_SCRIPT}"
    if [ $? -ne 0 ]; then
        echo "Error: Python script failed. Aborting commit."
        exit 1 # Abort the commit
    fi
    echo "Python script finished successfully."
    
    # 3. Commit and Push Changes within the Jekyll Submodule
    echo "Committing and pushing changes within the Jekyll submodule..."
    
    # Store current directory and git environment
    ORIGINAL_DIR=$(pwd)
    ORIGINAL_GIT_DIR="${GIT_DIR}"
    ORIGINAL_GIT_WORK_TREE="${GIT_WORK_TREE}"
    ORIGINAL_GIT_INDEX_FILE="${GIT_INDEX_FILE}"

    # 4. Update the parent repository to reference the new submodule commit
    echo "Updating parent repository submodule reference..."
    cd "${ORIGINAL_DIR}"

    # Stage the submodule update in the parent repository
    git add "${JEKYLL_SUBMODULE_PATH}"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to stage submodule update in parent repository."
        exit 1
    fi

    echo "Submodule reference updated in parent repository."

    # Unset git environment variables that interfere with submodule operations
    unset GIT_DIR
    unset GIT_WORK_TREE  
    unset GIT_INDEX_FILE
    
    # Change to submodule directory
    if ! cd "${JEKYLL_SUBMODULE_PATH}"; then
        echo "Error: Could not change to submodule directory"
        cd "${ORIGINAL_DIR}"
        exit 1
    fi
    
    # Configure Git within the submodule
    git config user.name "Obsidian Jekyll Sync Bot"
    git config user.email "matej.schrodl@gmail.com"
    
    # Stage the new/modified files generated by the Python script
    git add -A
    if [ $? -ne 0 ]; then
        echo "Error: Failed to stage files in Jekyll submodule. Aborting."
        cd "${ORIGINAL_DIR}"
        exit 1
    fi
    
    # Check if there are any changes to commit in the submodule
    if git diff --cached --exit-code --quiet; then
        echo "No changes detected in Jekyll submodule to commit."
    else
        # Commit changes in the submodule
        git commit -m "Automated: Update knowledge base from Obsidian"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to commit changes in Jekyll submodule. Aborting."
            cd "${ORIGINAL_DIR}"
            exit 1
        fi
        echo "Changes committed in Jekyll submodule."
        
        # Push changes to the Jekyll submodule's remote
        git push origin HEAD
        if [ $? -ne 0 ]; then
            echo "Error: Failed to push changes to Jekyll submodule remote. Aborting."
            cd "${ORIGINAL_DIR}"
            exit 1
        fi
        echo "Changes pushed to Jekyll submodule remote."
    fi
    
    # Return to original directory and restore git environment
    cd "${ORIGINAL_DIR}"
    [ -n "${ORIGINAL_GIT_DIR}" ] && export GIT_DIR="${ORIGINAL_GIT_DIR}"
    [ -n "${ORIGINAL_GIT_WORK_TREE}" ] && export GIT_WORK_TREE="${ORIGINAL_GIT_WORK_TREE}"
    [ -n "${ORIGINAL_GIT_INDEX_FILE}" ] && export GIT_INDEX_FILE="${ORIGINAL_GIT_INDEX_FILE}"
    
else
    echo "No relevant changes detected in ${OBSIDIAN_PUBLISH_DIR} directory. Skipping conversion."
fi

echo "--- Pre-commit hook finished ---"
exit 0